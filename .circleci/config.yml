version: 2.1

templates:
  filter-tag-templates: &filter-version-regex
    tags:
      only: /^v\d+\.\d+\.\d+(\-[a-z]+\d+)?$/
    branches:
      ignore: /.*/


var_1: &docker_image circleci/node:10.13.0-browsers
var_2: &cache_key raiden-webui-{{ .Branch }}-{{ checksum "package-lock.json" }}

anchor_1: &root_package_lock_key
  key: *cache_key

anchor_2: &attach_options
  at: .


executors:
  base-executor:
    working_directory: ~/src
    docker:
      - image: *docker_image
  python-executor:
    working_directory: ~/
    docker:
      - image: circleci/python:3.7


commands:
  config-path:
    description: "Set environment variables and change path to use venv"
    steps:
      - run:
          name: "Configure PATH"
          command: |
            echo 'export PATH=~/venv-3.7/bin:~/.local/bin:${PATH}' >> ${BASH_ENV}

  activate-venv:
    description: "Activate the venv"
    steps:
      - run:
          name: "Activate the venv"
          command: |
            . ${VENV_PATH}/bin/activate


jobs:
  install:
    executor: base-executor
    steps:
      - checkout
      - restore_cache: *root_package_lock_key
      - run: npm ci
      - save_cache:
          <<: *root_package_lock_key
          paths:
            - "node_modules"
      - persist_to_workspace:
          root: .
          paths:
            - ./*

  check_licenses:
    executor: base-executor
    working_directory: ~/
    steps:
      - attach_workspace: *attach_options
      - run:
          name: Update $PATH
          command: echo 'export PATH=$PATH:/tmp/node_modules/.bin' >> $BASH_ENV
      - run:
          name: Install license checker
          command: cd /tmp && npm install license-checker@25.0.1
      - run:
          name: Check Licenses
          command: license-checker --production --onlyAllow 'MIT;BSD;Apache;MPL;LGPL;ZPL;ISC;WTFPL;Unlicense' --excludePackages 'uuid@2.0.1' --excludePrivatePackages # uuid@2.0.1 has an issue with the license information but it is licensed under MIT

  lint:
    executor: base-executor
    steps:
      - attach_workspace: *attach_options
      - run: npm run prettier:check
      - run: npm run lint

  test:
    executor: base-executor
    steps:
      - attach_workspace: *attach_options
      - run: npm run test -- --watch=false --progress=false --browsers=ChromeHeadlessCI --code-coverage
      - store_test_results:
          path: ./test-reports
      - store_artifacts:
          path: ./test-reports
      - run:
          name: "Install codecov"
          command: npm install codecov
      - run:
          name: "Upload coverage"
          command: node_modules/codecov/bin/codecov

  build:
    executor: base-executor
    steps:
      - attach_workspace: *attach_options
      - run: npm run build:prod
      - persist_to_workspace:
          root: .
          paths:
            - ./raiden_webui/ui

  build-package:
    executor: python-executor
    steps:
      - attach_workspace: *attach_options
      - run:
          name: "Create the packages"
          command: |
            python setup.py sdist
            python setup.py bdist_wheel
      - persist_to_workspace:
          root: .
          paths:
            - ./dist

  deploy-github-release:
    working_directory: ~/
    docker:
      - image: cibuilds/github:0.10
    steps:
      - attach_workspace: *attach_options
      - run:
          name: "Publish Release on GitHub"
          command: |
            echo "TAG: ${CIRCLE_TAG}"
            VERSION=${CIRCLE_TAG}
            ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -replace ${VERSION} ./dist/

  deploy-pypi:
    executor:
      name: python-executor
    steps:
      - attach_workspace: *attach_options
      - run:
          name: "Create the virtualenv"
          command: |
            python -m venv ~/venv-3.7
            echo 'export VENV_PATH="$HOME/venv-3.7"' >> ${BASH_ENV}
      - config-path
      - activate-venv
      - run:
          name: "Install twine"
          command: pip install twine
      - run:
          name: "Upload to pypi"
          command: |
            twine upload -u $PYPI_USER -p $PYPI_PASSWORD dist/*


workflows:
  version: 2
  default_workflow:
    jobs:
      - install
      - check_licenses:
          requires:
            - install
      - lint:
          requires:
            - install
      - build:
          requires:
            - install
      - test:
          requires:
            - lint
            - build
  package_deploy:
    jobs:
      - install:
          filters:
            <<: *filter-version-regex
      - build:
          requires:
            - install
          filters:
            <<: *filter-version-regex
      - test:
          requires:
            - build
          filters:
            <<: *filter-version-regex
      - build-package:
          requires:
            - test
          filters:
            <<: *filter-version-regex
      - deploy-github-release:
          context: "Raiden Context"
          requires:
            - build-package
          filters:
            <<: *filter-version-regex
      - deploy-pypi:
          context: "Raiden Context"
          requires:
            - build-package
          filters:
            <<: *filter-version-regex
